
"Name"    = 'ArcaneScript'
"Author"  = 'Amrit'
"Version" = '1' 
"About"   = 'ArcaneScript'

! ===================================================================
! General Settings
! ===================================================================

"Start Symbol"   = <Statements>
"Case Sensitive" = True

! ===================================================================
! Character Sets
! ===================================================================

{String Ch} = {Printable} - ["]

! ===================================================================
! Terminals
! ===================================================================

Identifier = {Letter}{AlphaNumeric}*
StringLiteral ='"' {String Ch}* '"'
NumberLiteral = {Digit}+('.'{Digit}+)?

start = '{'
end = '}'

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

! ===================================================================
! Grammar Rules
! ===================================================================

<Statements> ::= <StatementOrBlock> <Statements>
               | <StatementOrBlock> 

<StatementOrBlock> ::= <Statement>
               | start <Statements> end 

<Statement> ::= print <Expression> ';'
              | print <Expression> <Expression> ';'
              | print <Expression> input Identifier ';'
              | println <Expression> ';'
              | println <Expression> <Expression> ';'
              | println <Expression> input Identifier ';'
              | Identifier '=' <Operator> ';'
              | Identifier '=' Identifier '[' <Expression> ']' ';'
              | Identifier '['NumberLiteral']' '=' <Expression> ';'
              | for '(' <Statement> <Expression> ';' <Statement> ')' start <Statements> end
              | while '(' <Expression> ')' start <Statements> end
              | if '(' <Expression> ')' start <Statements> end
              | if '(' <Expression> ')' start <Statements> end else start <Statements> end
              | invoke Identifier '(' <OptionalParamList> ')' start <Statements> end
              | log <Expression> ';'
              | array Identifier '[' NumberLiteral ']' '=' start <ArgumentList> end ';'
              | array Identifier '[' ']' '=' start <ArgumentList> end ';'
              | array Identifier '[' NumberLiteral ']' ';'       
              | Identifier '(' <OptionalArgumentList> ')' ';'
              

<OptionalParamList> ::= <ParamList>
                      |

<ParamList> ::= Identifier ',' <ParamList>
              | Identifier
              

! ===================================================================
! Expression and Operators
! ===================================================================

<Expression> ::= <Expression> '>' <Operator>
               | <Expression> '<' <Operator>
               | <Expression> '<=' <Operator>
               | <Expression> '>=' <Operator>
               | <Expression> '==' <Operator>
               | <Operator>

<Operator> ::= <Operator> '+' <Operator>
             | <Operator> '-' <Operator>
             | <Operator> '&' <Operator>
             | <Operator> '*' <Operator>
             | <Operator> '/' <Operator>
             | <NegativeValue>

<NegativeValue> ::= '-' <Value>
                  | <Value>

<Value> ::= Identifier
         | StringLiteral
         | Identifier '(' <OptionalArgumentList> ')'
         | '(' <Expression> ')'
         | NumberLiteral
         | Identifier '[' <Expression> ']'

<OptionalArgumentList> ::= <ArgumentList>
                |

<ArgumentList> ::= <Expression> ',' <ArgumentList>
                | <Expression>
                

! ===================================================================
! Arrays
! ===================================================================


               


